// Code generated by protoc-gen-go. DO NOT EDIT.
// source: tile.proto

package tilepb

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type MapTile struct {
	// This a big detour from the Tile indexing system. Maybe forcing Tile &
	// MapTile to be the same thing is not helpful?
	Index []byte `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
	// Number of levels between root and leaves of this tile.
	TileLevels int32 `protobuf:"varint,2,opt,name=tile_levels,json=tileLevels,proto3" json:"tile_levels,omitempty"`
	// Values
	Root                 []byte      `protobuf:"bytes,3,opt,name=root,proto3" json:"root,omitempty"`
	Leaves               []*TileLeaf `protobuf:"bytes,4,rep,name=leaves,proto3" json:"leaves,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *MapTile) Reset()         { *m = MapTile{} }
func (m *MapTile) String() string { return proto.CompactTextString(m) }
func (*MapTile) ProtoMessage()    {}
func (*MapTile) Descriptor() ([]byte, []int) {
	return fileDescriptor_00eb11d7cb77dd46, []int{0}
}

func (m *MapTile) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MapTile.Unmarshal(m, b)
}
func (m *MapTile) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MapTile.Marshal(b, m, deterministic)
}
func (m *MapTile) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MapTile.Merge(m, src)
}
func (m *MapTile) XXX_Size() int {
	return xxx_messageInfo_MapTile.Size(m)
}
func (m *MapTile) XXX_DiscardUnknown() {
	xxx_messageInfo_MapTile.DiscardUnknown(m)
}

var xxx_messageInfo_MapTile proto.InternalMessageInfo

func (m *MapTile) GetIndex() []byte {
	if m != nil {
		return m.Index
	}
	return nil
}

func (m *MapTile) GetTileLevels() int32 {
	if m != nil {
		return m.TileLevels
	}
	return 0
}

func (m *MapTile) GetRoot() []byte {
	if m != nil {
		return m.Root
	}
	return nil
}

func (m *MapTile) GetLeaves() []*TileLeaf {
	if m != nil {
		return m.Leaves
	}
	return nil
}

type TileLeaf struct {
	// The path from the root of this tile to this leaf.
	// If missing then this tile directly follows from the previous leaf.
	Path []byte `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	// The hash of the value being committed to.
	Value []byte `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	// Raw data attached to this leaf. This is optional. If provided then it
	// will be small and should be commited to be `value`, though this is up
	// to the personality to arrange.
	Data                 []byte   `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TileLeaf) Reset()         { *m = TileLeaf{} }
func (m *TileLeaf) String() string { return proto.CompactTextString(m) }
func (*TileLeaf) ProtoMessage()    {}
func (*TileLeaf) Descriptor() ([]byte, []int) {
	return fileDescriptor_00eb11d7cb77dd46, []int{1}
}

func (m *TileLeaf) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TileLeaf.Unmarshal(m, b)
}
func (m *TileLeaf) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TileLeaf.Marshal(b, m, deterministic)
}
func (m *TileLeaf) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TileLeaf.Merge(m, src)
}
func (m *TileLeaf) XXX_Size() int {
	return xxx_messageInfo_TileLeaf.Size(m)
}
func (m *TileLeaf) XXX_DiscardUnknown() {
	xxx_messageInfo_TileLeaf.DiscardUnknown(m)
}

var xxx_messageInfo_TileLeaf proto.InternalMessageInfo

func (m *TileLeaf) GetPath() []byte {
	if m != nil {
		return m.Path
	}
	return nil
}

func (m *TileLeaf) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *TileLeaf) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type MapEntry struct {
	// Output of SHA256 that identifies this key.
	Key []byte `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// Output of SHA256 that is the hash of the value to be stored.
	Value []byte `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	// Raw data that can be attached to the leaf. This should be committed to
	// by `value`, and should be short. It will be available via the `data`
	// field of TileLeaf in the output tiles. This is a convenience for
	// personalities that commit to very small values and where running a CAS
	// to lookup the value would be overkill.
	Data                 []byte   `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MapEntry) Reset()         { *m = MapEntry{} }
func (m *MapEntry) String() string { return proto.CompactTextString(m) }
func (*MapEntry) ProtoMessage()    {}
func (*MapEntry) Descriptor() ([]byte, []int) {
	return fileDescriptor_00eb11d7cb77dd46, []int{2}
}

func (m *MapEntry) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MapEntry.Unmarshal(m, b)
}
func (m *MapEntry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MapEntry.Marshal(b, m, deterministic)
}
func (m *MapEntry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MapEntry.Merge(m, src)
}
func (m *MapEntry) XXX_Size() int {
	return xxx_messageInfo_MapEntry.Size(m)
}
func (m *MapEntry) XXX_DiscardUnknown() {
	xxx_messageInfo_MapEntry.DiscardUnknown(m)
}

var xxx_messageInfo_MapEntry proto.InternalMessageInfo

func (m *MapEntry) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *MapEntry) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *MapEntry) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func init() {
	proto.RegisterType((*MapTile)(nil), "tilepb.MapTile")
	proto.RegisterType((*TileLeaf)(nil), "tilepb.TileLeaf")
	proto.RegisterType((*MapEntry)(nil), "tilepb.MapEntry")
}

func init() { proto.RegisterFile("tile.proto", fileDescriptor_00eb11d7cb77dd46) }

var fileDescriptor_00eb11d7cb77dd46 = []byte{
	// 213 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x90, 0x31, 0x4f, 0x85, 0x30,
	0x10, 0xc7, 0x83, 0xbc, 0x87, 0xe4, 0x1e, 0x03, 0x69, 0x1c, 0xba, 0x49, 0x98, 0x3a, 0x31, 0xe8,
	0x37, 0x30, 0xd1, 0x38, 0xc8, 0xd2, 0x30, 0xb9, 0x98, 0x23, 0x9c, 0x91, 0xd8, 0xd0, 0x06, 0x2a,
	0x91, 0xc5, 0xcf, 0x6e, 0x7a, 0x94, 0xfd, 0x6d, 0xbf, 0xbb, 0xde, 0xfd, 0x7f, 0xcd, 0x01, 0xf8,
	0xd1, 0x50, 0xe3, 0x66, 0xeb, 0xad, 0xc8, 0x02, 0xbb, 0xbe, 0xfe, 0x83, 0xdb, 0x16, 0x5d, 0x37,
	0x1a, 0x12, 0x77, 0x70, 0x1e, 0xa7, 0x81, 0x7e, 0x65, 0x52, 0x25, 0xaa, 0xd0, 0x7b, 0x21, 0xee,
	0xe1, 0x12, 0x46, 0x3f, 0x0c, 0xad, 0x64, 0x16, 0x79, 0x53, 0x25, 0xea, 0xac, 0x39, 0xe9, 0x8d,
	0x3b, 0x42, 0xc0, 0x69, 0xb6, 0xd6, 0xcb, 0x94, 0xb7, 0x98, 0x85, 0x82, 0xcc, 0x10, 0xae, 0xb4,
	0xc8, 0x53, 0x95, 0xaa, 0xcb, 0x43, 0xd9, 0xec, 0xba, 0xa6, 0xe3, 0x3d, 0xfc, 0xd4, 0xf1, 0xbd,
	0x7e, 0x85, 0xfc, 0xe8, 0x85, 0x24, 0x87, 0xfe, 0x2b, 0xfa, 0x99, 0xc3, 0xa7, 0x56, 0x34, 0x3f,
	0xc4, 0xe2, 0x42, 0xef, 0x45, 0x98, 0x1c, 0xd0, 0xe3, 0xe1, 0x0c, 0x5c, 0xbf, 0x40, 0xde, 0xa2,
	0x7b, 0x9e, 0xfc, 0xbc, 0x89, 0x12, 0xd2, 0x6f, 0xda, 0x62, 0x50, 0xc0, 0xeb, 0x73, 0x9e, 0xf2,
	0xf7, 0x78, 0x9b, 0x3e, 0xe3, 0x53, 0x3d, 0xfe, 0x07, 0x00, 0x00, 0xff, 0xff, 0xbb, 0xbe, 0x66,
	0x80, 0x38, 0x01, 0x00, 0x00,
}
